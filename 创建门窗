package com.eteks.test;

import com.eteks.sweethome3d.model.*;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CreateAll extends Plugin {

    public static HomeDoorOrWindow Door;
    public static HomeDoorOrWindow Window;

    @Override
    public PluginAction[] getActions() {
        return new PluginAction[]{new AutomaticWallAndDoorWindowAction()};
    }

    public class AutomaticWallAndDoorWindowAction extends PluginAction {
        @Override
        public void execute() {
            // 让用户选择文件路径
            String filePath = selectFile();
            if (filePath == null || filePath.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No file selected, operation canceled.");
                return;
            }
            // 获取门窗模型
            UserPreferences userPreferences = getUserPreferences();
            FurnitureCatalog furnitureCatalog = userPreferences.getFurnitureCatalog();
            FurnitureCategory furnitureCategory = furnitureCatalog.getCategory(3);
            for (CatalogPieceOfFurniture catalogPieceOfFurniture : furnitureCategory.getFurniture()) {
                // 检查家具名称是否为“窗户”或“门”
                if ("门".equals(catalogPieceOfFurniture.getName())) {
                    Door = new HomeDoorOrWindow((DoorOrWindow) catalogPieceOfFurniture);
                } else if ("窗户".equals(catalogPieceOfFurniture.getName())) {
                    Window = new HomeDoorOrWindow((DoorOrWindow) catalogPieceOfFurniture);
                }
            }
            // 从选择的文件中读取墙体、门窗数据
            List<Wall> walls = new ArrayList<>();
            List<HomeDoorOrWindow> doors = new ArrayList<>();
            List<HomeDoorOrWindow> windows = new ArrayList<>();
            readWallsDoorsWindowsFromFile(filePath, walls, doors, windows);
            // 获取当前的家居模型
            Home home = getHome();
            // 将墙体添加到家居模型中
            for (Wall wall : walls) {
                home.addWall(wall);
            }

            // 将门窗添加到家居模型中
            for (HomeDoorOrWindow door : doors) {
                home.addPieceOfFurniture(door);
            }
            for (HomeDoorOrWindow window : windows) {
                home.addPieceOfFurniture(window);
            }

            JOptionPane.showMessageDialog(null, "Walls, doors and windows created successfully!");
        }

        private String selectFile() {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Select Wall, Door and Window Data File");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                return fileChooser.getSelectedFile().getAbsolutePath();
            }
            return null;
        }

        private void readWallsDoorsWindowsFromFile(String filePath, List<Wall> walls, List<HomeDoorOrWindow> doors, List<HomeDoorOrWindow> windows) {
            try (BufferedReader reader = new BufferedReader(new FileReader(new File(filePath)))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.startsWith("=== Wall ===")) {
                        while ((line = reader.readLine()) != null && !line.startsWith("===")) {
                            if (line.startsWith("Top-Left")) {
                                String[] topLeftParts = line.split(":")[1].replaceAll("[\\[\\]]", "").split(",");
                                float x1 = Float.parseFloat(topLeftParts[0].trim());
                                float y1 = Float.parseFloat(topLeftParts[1].trim());

                                line = reader.readLine(); // 读取下一行
                                if (line != null && line.startsWith("Bottom-Right")) {
                                    String[] bottomRightParts = line.split(":")[1].replaceAll("[\\[\\]]", "").split(",");
                                    float x2 = Float.parseFloat(bottomRightParts[0].trim());
                                    float y2 = Float.parseFloat(bottomRightParts[1].trim());

                                    walls.add(new Wall(x1, y1, x2, y2, 8, 250));
                                }
                            }
                        }
                    } else if (line.startsWith("=== Door ===")) {
                        while ((line = reader.readLine()) != null && !line.startsWith("===")) {
                            if (line.startsWith("Top-Left")) {
                                String[] topLeftParts = line.split(":")[1].replaceAll("[\\[\\]]", "").split(",");
                                float x1 = Float.parseFloat(topLeftParts[0].trim());
                                float y1 = Float.parseFloat(topLeftParts[1].trim());

                                line = reader.readLine(); // 读取下一行
                                if (line != null && line.startsWith("Bottom-Right")) {
                                    String[] bottomRightParts = line.split(":")[1].replaceAll("[\\[\\]]", "").split(",");
                                    float x2 = Float.parseFloat(bottomRightParts[0].trim());
                                    float y2 = Float.parseFloat(bottomRightParts[1].trim());

                                    float midX = (x1 + x2) / 2;
                                    float midY = (y1 + y2) / 2;
                                    float x = Math.abs(x2-x1);
                                    float y = Math.abs(y2-y1);
                                    float width = Math.max(x, y);
                                    HomeDoorOrWindow door = new HomeDoorOrWindow(Door);
                                    door.setX(midX);
                                    door.setY(midY);
                                    door.setWidth(width);
                                    doors.add(door);
                                }
                            }
                        }
                    } else if (line.startsWith("=== Window ===")) {
                        while ((line = reader.readLine()) != null && !line.startsWith("===")) {
                            if (line.startsWith("Top-Left")) {
                                String[] topLeftParts = line.split(":")[1].replaceAll("[\\[\\]]", "").split(",");
                                float x1 = Float.parseFloat(topLeftParts[0].trim());
                                float y1 = Float.parseFloat(topLeftParts[1].trim());

                                line = reader.readLine(); // 读取下一行
                                if (line != null && line.startsWith("Bottom-Right")) {
                                    String[] bottomRightParts = line.split(":")[1].replaceAll("[\\[\\]]", "").split(",");
                                    float x2 = Float.parseFloat(bottomRightParts[0].trim());
                                    float y2 = Float.parseFloat(bottomRightParts[1].trim());

                                    float midX = (x1 + x2) / 2;
                                    float midY = (y1 + y2) / 2;
                                    float x = Math.abs(x2-x1);
                                    float y = Math.abs(y2-y1);
                                    float width = Math.max(x, y);
                                    HomeDoorOrWindow window = new HomeDoorOrWindow(Window);
                                    window.setX(midX);
                                    window.setY(midY);
                                    window.setWidth(width);
                                    windows.add(window);
                                }
                            }
                        }
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error reading file: " + e.getMessage());
                e.printStackTrace();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Error parsing file data: " + e.getMessage());
                e.printStackTrace();
            }
        }

        public AutomaticWallAndDoorWindowAction() {
            putPropertyValue(Property.NAME, "Automatic Wall and Door/Window Creation");
            putPropertyValue(Property.MENU, "Tools");
            setEnabled(true);
        }
    }
}
